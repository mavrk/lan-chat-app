/*
 This file is part of JLM v0.2

 JLM is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 JLM is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with JLM.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * JLMFrame.java
 *
 * Created on Jul 21, 2012, 3:11:32 PM
 */
package com.mavrk.jlm.gui;

import com.mavrk.jlm.core.message.Message;
import com.mavrk.jlm.core.message.filters.FilterTypes;
import com.mavrk.jlm.core.message.filters.MessageFilter;
import com.mavrk.jlm.core.message.reader.MessageReader;
import com.mavrk.jlm.core.messenger.Messenger;
import com.mavrk.jlm.core.messenger.client.MessengerClient;
import com.mavrk.jlm.core.messenger.server.MessengerServer;
import com.mavrk.jlm.gui.components.ChatTextArea;
import com.mavrk.jlm.utils.Calender;
import com.mavrk.jlm.whiteboard.gui.WhiteBoardFrame;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author mavrk
 */

/*
 * JLMFrame.java
 *
 * this class provides the gui front end for the JLM project
 */
public class JLMFrame extends javax.swing.JFrame {

    // a object reffernce of the Messenger
    // used to reffernce server or client based on user selection
    private Messenger messenger = null;
    // white board object
    private WhiteBoardFrame whiteBoard = null;
    // raw message object - which will be read by the reader
    private Message rawMessage = null;
    // text message object - filtered text message from the raw message
    private Message textMessage = null;
    // control message object - filtered control message from the raw message
    private Message controlMessage = null;
    // text message filter to filter out text message from raw message
    private MessageFilter textMessageFilter = null;
    // control message filter to filter out control message from raw message
    private MessageFilter controlMessageFilter = null;
    // message reader for continious reading from the socket
    private MessageReader messageReader = null;
    // chat text area object for displaying chat messages
    private ChatTextArea chatTextArea = null;
    // the current user name
    private String userName = null;
    // server ip
    private String ipString = null;
    // server port id
    private String portIdString = null;
    // the program startup date and time used in message logging
    private String chatStartUpDateAndTime = null;

    /**
     * Creates new form JLMFrame
     */
    public JLMFrame() {

        // initialise the chat text area 
        // as it is reffernced by the frame textarea object ( customised generated code)
        chatTextArea = new ChatTextArea();
        // initilise the base components
        initComponents();
        // the frames default exit option is set to DO_NOTHING 
        // so as to prevent exit while in connection
        // exit is only done by the exitJLM method

        // set the frame icon
        try {
            this.setIconImage(ImageIO.read(getClass().getResource("/com/mavrk/jlm/gui/resources/chat_16x16.png")));
        } catch (IOException ex) {
            Logger.getLogger(JLMFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        // initialise the white board object
        whiteBoard = new WhiteBoardFrame();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chatPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        frameTextArea = chatTextArea;
        userInputPanel = new javax.swing.JPanel();
        userInputTextField = new javax.swing.JTextField();
        userInputSendButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveChatMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        connectionsMenu = new javax.swing.JMenu();
        serverMenuItem = new javax.swing.JMenuItem();
        clientMenuItem = new javax.swing.JMenuItem();
        closeConnectionMenuItem = new javax.swing.JMenuItem();
        whiteBoardMenu = new javax.swing.JMenu();
        showBoardMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        myIpMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();
        helpMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("JLM - Java LAN Messenger");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                windowClosingEvent(evt);
            }
        });

        chatPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Chat"));

        frameTextArea.setEditable(false);
        frameTextArea.setColumns(20);
        frameTextArea.setRows(5);
        jScrollPane1.setViewportView(frameTextArea);

        javax.swing.GroupLayout chatPanelLayout = new javax.swing.GroupLayout(chatPanel);
        chatPanel.setLayout(chatPanelLayout);
        chatPanelLayout.setHorizontalGroup(
            chatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
                .addContainerGap())
        );
        chatPanelLayout.setVerticalGroup(
            chatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                .addContainerGap())
        );

        userInputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Input"));

        userInputTextField.setForeground(new java.awt.Color(0, 0, 204));
        userInputTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputTextField_KeyTypedEvent(evt);
            }
        });

        userInputSendButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mavrk/jlm/gui/resources/send.png"))); // NOI18N
        userInputSendButton.setText("Send");
        userInputSendButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                inputSend_MousePressedEvent(evt);
            }
        });

        javax.swing.GroupLayout userInputPanelLayout = new javax.swing.GroupLayout(userInputPanel);
        userInputPanel.setLayout(userInputPanelLayout);
        userInputPanelLayout.setHorizontalGroup(
            userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userInputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(userInputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(userInputSendButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        userInputPanelLayout.setVerticalGroup(
            userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userInputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(userInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userInputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userInputSendButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        fileMenu.setText("File");

        saveChatMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mavrk/jlm/gui/resources/save.png"))); // NOI18N
        saveChatMenuItem.setText("Save Chat");
        saveChatMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                saveChatMenuItem_MousePressedEvent(evt);
            }
        });
        fileMenu.add(saveChatMenuItem);

        exitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mavrk/jlm/gui/resources/exit.png"))); // NOI18N
        exitMenuItem.setText("Exit");
        exitMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                fileExit_MousePressedEvent(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        connectionsMenu.setText("Connections");

        serverMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mavrk/jlm/gui/resources/server.png"))); // NOI18N
        serverMenuItem.setText("Server");
        serverMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                connectionsServer_MousePressedEvent(evt);
            }
        });
        connectionsMenu.add(serverMenuItem);

        clientMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mavrk/jlm/gui/resources/client.png"))); // NOI18N
        clientMenuItem.setText("Client");
        clientMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                connectionsClient_MousePressedEvent(evt);
            }
        });
        connectionsMenu.add(clientMenuItem);

        closeConnectionMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mavrk/jlm/gui/resources/disconnect.png"))); // NOI18N
        closeConnectionMenuItem.setText("Close Connection");
        closeConnectionMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                connectionsCloseConnection_MousePressedEvent(evt);
            }
        });
        connectionsMenu.add(closeConnectionMenuItem);

        menuBar.add(connectionsMenu);

        whiteBoardMenu.setText("WhiteBoard");

        showBoardMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mavrk/jlm/whiteboard/gui/resources/whiteBoardIcon_16x16.png"))); // NOI18N
        showBoardMenuItem.setText("Show Board");
        showBoardMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                showBoardMenuItem_MousePressedEvent(evt);
            }
        });
        whiteBoardMenu.add(showBoardMenuItem);

        menuBar.add(whiteBoardMenu);

        helpMenu.setText("Help");

        myIpMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mavrk/jlm/gui/resources/ip.png"))); // NOI18N
        myIpMenuItem.setText("My IP");
        myIpMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                myIPMenuItem_MousePressedEvent(evt);
            }
        });
        helpMenu.add(myIpMenuItem);

        aboutMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mavrk/jlm/gui/resources/about.png"))); // NOI18N
        aboutMenuItem.setText("About");
        aboutMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                helpAbout_MousePressedEvent(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        helpMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mavrk/jlm/gui/resources/help.png"))); // NOI18N
        helpMenuItem.setText("Help");
        helpMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                helpHelp_MousePressedEvent(evt);
            }
        });
        helpMenu.add(helpMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chatPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(userInputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chatPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(userInputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
     * exitApp method
     * to exit from the application
     */
    private void exitAPP() {
        // set the messenger to null
        messenger = null;
        // set visibility to false
        this.setVisible(false);
        // dispose the gui resources
        this.dispose();
        // call garbage collector
        System.gc();
        // exit the application
        System.exit(0);
    }

    /*
     * exitJLM method
     * to exit from the JLM application
     */
    private void exitJLM() {
        try {
            // if messenger is initialised to client or server or is connected then
            if (messenger != null && messenger.isConnected()) {
                // ask the user, whether to terminate the live connection
                int r = JOptionPane.showConfirmDialog(rootPane, "Live Connection. Terminate?", "Connection", JOptionPane.YES_NO_OPTION);
                // on user approval
                if (r == JOptionPane.YES_OPTION) {
                    // disconnect the connection 
                    messenger.disconnect();
                    // exit the application
                    exitAPP();
                }
            } // if no connection then exit
            else {
                exitAPP();
            }
        } catch (SocketException ex) {
            JOptionPane.showMessageDialog(rootPane, "Connection Termination Failed!\nSocket Exception:\n" + ex + "\nExiting.");
            Logger.getLogger(JLMFrame.class.getName()).log(Level.SEVERE, null, ex);
            exitAPP();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane, "Connection Termination Failed!\nIO Exception:\n" + ex + "\nExiting.");
            Logger.getLogger(JLMFrame.class.getName()).log(Level.SEVERE, null, ex);
            exitAPP();
        } catch (NullPointerException ex) {
            // on null pointer exception do nothing
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Connection Termination Failed!\nUnknown Exception:\n" + ex, "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(JLMFrame.class.getName()).log(Level.SEVERE, null, ex);
            exitAPP();
        }
    }

    /*
     * fileExit_MousePressedEvent method
     * called when user selects the exit menu from the file menu of the menu bar
     */
    private void fileExit_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileExit_MousePressedEvent
        // TODO add your handling code here:
        // exit JLM
        exitJLM();
    }//GEN-LAST:event_fileExit_MousePressedEvent

    /*
     * connectionsServer_MousePressedEvent method
     * called when user selects the server type connection from
     * the connections menu of the menu bar
     */
    private void connectionsServer_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_connectionsServer_MousePressedEvent
        // TODO add your handling code here:
        // connect only if no live connection
        if (messenger == null) {
            // get the server port id from the user
            portIdString = JOptionPane.showInputDialog(rootPane, "Enter Server Port ID to set", "3333");
            try {
                // if user selects cancel then throw null pointer exception
                if (portIdString == null) {
                    throw new NullPointerException();
                }
                // convert the string port id to integer port id
                final int portId = Integer.parseInt(portIdString);
                // assign the Messenger reffernce object with MessengerServer object
                messenger = new MessengerServer();
                // notify the user about the connection delay
                JOptionPane.showMessageDialog(rootPane, "Starting Server. Please Wait.");
                // start the server using a anonymous thread object with the port id
                // no ip required for the server type connection
                new Thread() {
                    @Override
                    public void run() {
                        try {
                            messenger.connect(null, portId);
                            updateMessages();
                            // notify the user about the successfull connection
                            JOptionPane.showMessageDialog(rootPane, "Chat Server started at Port Id :" + portIdString, "Server Started", JOptionPane.INFORMATION_MESSAGE);
                        } catch (IOException ex) {
                            JOptionPane.showMessageDialog(rootPane, "Could not start Server using Port Id: " + portIdString, "Server Start Error", JOptionPane.ERROR_MESSAGE);
                            Logger.getLogger(JLMFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }.start();
                // get the user name to be used while chatting
                userName = JOptionPane.showInputDialog(rootPane, "Enter your chat name", "Server");
                // if cancel pressed then set the default user name
                if (userName == null) {
                    userName = "Server";
                }
                // set the chat startup time - used in chat save
                chatStartUpDateAndTime = Calender.getCurrentDateAndTime();

            } catch (NullPointerException ex) {
                // if cancel option is selected by the user then do nothing
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(rootPane, "Please Enter a valid Port Id!", "Port ID Error", JOptionPane.ERROR_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(rootPane, "Could not start Server using Port Id: " + portIdString, "Server Start Error", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(JLMFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            // if currently connected (live connection) then notify user
            JOptionPane.showMessageDialog(rootPane, "Live Connection! Close Connection to Reset!");
        }
    }//GEN-LAST:event_connectionsServer_MousePressedEvent

    /*
     * connectionsClient_MousePressedEvent method
     * called when user selects client type connection from the connection menu
     * of the menu bar
     */
    private void connectionsClient_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_connectionsClient_MousePressedEvent
        // TODO add your handling code here:
        // connect only if no live connection
        if (messenger == null) {
            try {
                // get the server ip from user
                ipString = JOptionPane.showInputDialog(rootPane, "Enter Server IP", "localhost");
                // if user selects cancel then exit by throwing null pointer exception
                if (ipString == null) {
                    throw new NullPointerException();
                }
                // get the serve port id from user
                portIdString = JOptionPane.showInputDialog(rootPane, "Enter Server Port ID", "3333");
                // if user selects cancel then exit by throwing null pointer exception
                if (portIdString == null) {
                    throw new NullPointerException();
                }
                // assign the Messenger reffernce object with MessengerClient object
                messenger = new MessengerClient();
                // connect the client with the server using server ip and server port id
                messenger.connect(ipString, Integer.parseInt(portIdString));
                updateMessages();
                // notify the user about the successfull connection
                JOptionPane.showMessageDialog(rootPane, "Chat Client connected to Chat Server with IP: " + ipString + " and Port Id: " + portIdString, "Client Connected", JOptionPane.INFORMATION_MESSAGE);
                // get the user name to be used while chat
                userName = JOptionPane.showInputDialog(rootPane, "Enter your chat name", "Client");
                // if cancel pressed then set the default user name
                if (userName == null) {
                    userName = "Client";
                }
                // set the chat startup time - used in chat save
                chatStartUpDateAndTime = Calender.getCurrentDateAndTime();

            } catch (NullPointerException ex) {
                // user cancels the input of ip or port id, do nothing
                nullifyMessengerAndMessages();
            } catch (NumberFormatException ex) {
                nullifyMessengerAndMessages();
                JOptionPane.showMessageDialog(rootPane, "Please Enter a valid Port Id!", "Port ID Error", JOptionPane.ERROR_MESSAGE);
            } catch (IOException ex) {
                nullifyMessengerAndMessages();
                JOptionPane.showMessageDialog(rootPane, "Could not connect to Server with IP: " + ipString + " and Port Id: " + portIdString + "\nIO Exception:\n" + ex, "Connection Error", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(JLMFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                nullifyMessengerAndMessages();
                JOptionPane.showMessageDialog(rootPane, "Could not connect to Server with IP: " + ipString + " and Port Id: " + portIdString + "\nUnknown Exception:\n" + ex, "Connection Error", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(JLMFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            // if currently connected (live connection) then notify user
            JOptionPane.showMessageDialog(rootPane, "Live Connection! Close Connection to Reset!");
        }
    }//GEN-LAST:event_connectionsClient_MousePressedEvent

    /*
     * method to nullify the messenger and messages objects
     */
    private void nullifyMessengerAndMessages() {
        // assign messenger to null
        messenger = null;
        // assign all messages to null
        rawMessage = null;
        textMessage = null;
        controlMessage = null;
        // call garbage collector to free the messenger memory
        System.gc();
    }
    /*
     * method to update the messages
     * - the recieved raw  message
     * - the filterd control message
     * - the filterd text message
     */

    private void updateMessages() {
        // create a raw message
        rawMessage = new Message();
        // set the mesenger for the raw message
        rawMessage.setMessenger(messenger);

        // create text message filter for the raw message
        textMessageFilter = new MessageFilter(rawMessage, FilterTypes.TEXT_FILTER);
        // get the filteredtext message
        textMessage = textMessageFilter.getFilteredMessage();

        // assign the text message to the chat text area 
        chatTextArea.setMessage(textMessage);

        // create control message filter for the raw message
        controlMessageFilter = new MessageFilter(rawMessage, FilterTypes.CONTROL_FILTER);
        // get the filtered message
        controlMessage = controlMessageFilter.getFilteredMessage();

        // assign the control message to the white board
        whiteBoard.setControlMessage(controlMessage);

        // create message reader for the raw message using the messenger
        messageReader = new MessageReader(rawMessage, messenger);
        // start reading the raw message using the reader
        messageReader.startReading();
    }

    /*
     * method called when user selects the close connection menu item from the connection menu
     */
    private void connectionsCloseConnection_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_connectionsCloseConnection_MousePressedEvent
        // TODO add your handling code here:
        try {
            // if messenger is initialised and connection is present then
            if (messenger != null && messenger.isConnected()) {
                // disconnect the connection
                messenger.disconnect();
                // notify the user about the successful disconnection
                JOptionPane.showMessageDialog(rootPane, "Connection Disconnected", "Connection", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // if messenger is null then it means no connection, so notify the user.
                JOptionPane.showMessageDialog(rootPane, "No Connections Found!", "Connection", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SocketException ex) {
            JOptionPane.showMessageDialog(rootPane, "Connection Termination Failed!\nSocket Exception:\n" + ex, "Disconnection Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(JLMFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane, "Connection Termination Failed!\nIO Exception:\n" + ex, "Disconnection Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(JLMFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            // on null pointer exception do nothing
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Connection Termination Failed!\nUnknown Exception:\n" + ex, "Disconnection Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(JLMFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            nullifyMessengerAndMessages();
        }
    }//GEN-LAST:event_connectionsCloseConnection_MousePressedEvent

    /*
     * method called when user selects the about menu from the help menu
     */
    private void helpAbout_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpAbout_MousePressedEvent
        // TODO add your handling code here:
        try {
            // create a property object
            Properties prop = new Properties();
            //load the jlm properties file
            InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream("com/mavrk/jlm/gui/properties/JLM.properties");
            prop.load(inputStream);
            // set the about info from the jlm properties
            String aboutMessage = prop.getProperty("AppName") + "\n\n"
                    + "Developed By: " + prop.getProperty("DevelopedBy") + "\n"
                    + "Email: " + prop.getProperty("DeveloperEmail");
            // show the info about the JLM
            JOptionPane.showMessageDialog(rootPane, aboutMessage, "About", JOptionPane.INFORMATION_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/com/mavrk/jlm/gui/resources/chat_32x32.png")));

        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(rootPane, "Error! Cannot Load About Docs!\nFile Not Found Exception:\n" + ex, "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(JLMFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane, "Error! Cannot Load About Docs!\nIO Exception:\n" + ex, "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(JLMFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Error! Cannot Load About Docs!\nUnknown Exception:\n" + ex, "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(JLMFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_helpAbout_MousePressedEvent
    /* 
     * method called when user selects the help menu from the help menu
     */
    private void helpHelp_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpHelp_MousePressedEvent
        {
            // TODO add your handling code here:
            try {
                // create a property object
                Properties prop = new Properties();
                //load the jlm properties file
                InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream("com/mavrk/jlm/gui/properties/JLM.properties");
                prop.load(inputStream);
                // set the help info from the property
                String helpMessage = prop.getProperty("AppHelp");
                // shoe the help info
                JOptionPane.showMessageDialog(rootPane, helpMessage, "Help", JOptionPane.INFORMATION_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/com/mavrk/jlm/gui/resources/chat_32x32.png")));

            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(rootPane, "Error! Cannot Load Help Docs!\nFile Not Found Exception:\n" + ex, "Error", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(JLMFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(rootPane, "Error! Cannot Load Help Docs!\nIO Exception:\n" + ex, "Error", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(JLMFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(rootPane, "Error! Cannot Load Help Docs!\nUnknown Exception:\n" + ex, "Error", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(JLMFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_helpHelp_MousePressedEvent

    /*
     * method called when user tries to close the window
     */
    private void windowClosingEvent(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowClosingEvent
        // TODO add your handling code here:
        // exit JLM
        exitJLM();
    }//GEN-LAST:event_windowClosingEvent

    /*
     * method called when user presses enter key or send button
     * after entering the message to be sent
     */
    private void sendMessage() {
        // TODO add your handling code here:
        try {
            // call the send message of the messenger reffernce object
            textMessage.sendMessage((char) FilterTypes.TEXT_FILTER + userName + ": " + userInputTextField.getText());
            // add the message to the user's chat window
            frameTextArea.append("\n" + userName + ": " + userInputTextField.getText());
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(rootPane, "Could not Send Message!\nNo Connection!", "Send Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Could not Send Message!\nUnknown Exception:\n" + ex, "Send Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(JLMFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            // finally clear the chat text input field
            userInputTextField.setText("");
        }
    }

    /*
     * method called when user presses the send button
     */
    private void inputSend_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inputSend_MousePressedEvent
        sendMessage();
    }//GEN-LAST:event_inputSend_MousePressedEvent

    /*
     * method called when user types into the char input field
     */
    private void inputTextField_KeyTypedEvent(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputTextField_KeyTypedEvent
        // TODO add your handling code here:
        // if user presses enter key then send the message
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            // calling send message method
            sendMessage();
        }
    }//GEN-LAST:event_inputTextField_KeyTypedEvent

    /*
     * method called when user selects the show board menu
     */
    private void showBoardMenuItem_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showBoardMenuItem_MousePressedEvent
        // TODO add your handling code here:
        // set the white board visible
        whiteBoard.setVisible(true);
    }//GEN-LAST:event_showBoardMenuItem_MousePressedEvent

    /*
     * method called when user selects the save chat menu from file menu
     */
    private void saveChatMenuItem_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveChatMenuItem_MousePressedEvent
        // TODO add your handling code here:
        // create a file chooser
        JFileChooser jfc = new JFileChooser();
        // get the selection result
        int r = jfc.showSaveDialog(jfc);
        // on approve selection
        if (r == JFileChooser.APPROVE_OPTION) {
            // create file output stream object
            FileOutputStream fout = null;
            try {
                // get the selected file
                File f = jfc.getSelectedFile();
                // create file output stream for the file
                fout = new FileOutputStream(f);
                // create the chat log header
                String chatLog = "******* JLM Chat Log *******\n"
                        // set the program startup time
                        + "Chat Started: " + chatStartUpDateAndTime + "\n"
                        // set the chat save time
                        + "Chat Saved: " + Calender.getCurrentDateAndTime() + "\n"
                        // set the connection type
                        + "Connected As: " + ((messenger instanceof MessengerClient) ? "Client" : "Server") + "\n"
                        // if connected as client then set the ip address
                        + (messenger instanceof MessengerClient ? ("IP: " + ipString + "\n") : "")
                        // set the port id
                        + "Port Id: " + portIdString + "\n"
                        // set the user name
                        + "User Name: " + userName + "\n"
                        + "******* Chat Message *******\n"
                        // set the chat message
                        + chatTextArea.getText();
                // write the created log onto the file
                fout.write(chatLog.getBytes());
                // flush the stream
                fout.flush();
            } catch (IOException ex) {
                Logger.getLogger(JLMFrame.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    // finally close the stream
                    fout.close();
                    JOptionPane.showMessageDialog(rootPane, "Chat Saved.");
                } catch (IOException ex) {
                    Logger.getLogger(JLMFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_saveChatMenuItem_MousePressedEvent

    /*
     * method called when user selects the my ip menu from the help menu
     */
    private void myIPMenuItem_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_myIPMenuItem_MousePressedEvent
        // TODO add your handling code here:
        try {
            // get the host ip and name and display it
            InetAddress host = InetAddress.getLocalHost();
            JOptionPane.showMessageDialog(
                    rootPane,
                    "Your IP: " + host.getHostAddress()
                    + "\nHost Name: " + host.getHostName(),
                    "MyIP",
                    JOptionPane.INFORMATION_MESSAGE,
                    new javax.swing.ImageIcon(getClass().getResource("/com/mavrk/jlm/gui/resources/chat_32x32.png")));
        } catch (UnknownHostException ex) {
            Logger.getLogger(JLMFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_myIPMenuItem_MousePressedEvent

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JLMFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JPanel chatPanel;
    private javax.swing.JMenuItem clientMenuItem;
    private javax.swing.JMenuItem closeConnectionMenuItem;
    private javax.swing.JMenu connectionsMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTextArea frameTextArea;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem myIpMenuItem;
    private javax.swing.JMenuItem saveChatMenuItem;
    private javax.swing.JMenuItem serverMenuItem;
    private javax.swing.JMenuItem showBoardMenuItem;
    private javax.swing.JPanel userInputPanel;
    private javax.swing.JButton userInputSendButton;
    private javax.swing.JTextField userInputTextField;
    private javax.swing.JMenu whiteBoardMenu;
    // End of variables declaration//GEN-END:variables
}
