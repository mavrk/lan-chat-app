/*
 This file is part of JLM v0.2

 JLM is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 JLM is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with JLM.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.mavrk.jlm.whiteboard.gui;

import com.mavrk.jlm.core.message.Message;
import com.mavrk.jlm.whiteboard.core.boardpanel.WhiteBoardPanel;
import com.mavrk.jlm.whiteboard.core.controller.CurrentBoardController;
import com.mavrk.jlm.whiteboard.core.controller.RemoteBoardController;
import com.mavrk.jlm.whiteboard.utils.ContrastColor;
import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author mavrk
 */

/*
 * this class provides the frame for the white board panel and implements
 * the user interface.
 */
public class WhiteBoardFrame extends javax.swing.JFrame {

    // the white board panel object
    private WhiteBoardPanel whiteBoardPanel = null;
    // the current board controller object to control the host white board panel
    private CurrentBoardController currentBoardController = null;
    // the remote board controller object to controll the remote white board panel
    private RemoteBoardController remoteBoardController = null;
    // control message object
    private Message controlMessage = null;
    // file object used while saving the drawn image
    private File file = null;
    // chalk and board color object
    private Color chalkColor = null;
    private Color boardColor = null;
    // the chalk size variable
    private int chalkSize = 0;

    /**
     * Creates new form WhiteBoardFrame
     */
    public WhiteBoardFrame() {
        // initialise the white board panel
        // as it is being refernce by the frame panel from within the generated code
        whiteBoardPanel = new WhiteBoardPanel();
        // initilise the components
        initComponents();
        // set the frame icon
        try {
            this.setIconImage(ImageIO.read(getClass().getResource("/com/mavrk/jlm/whiteboard/gui/resources/whiteBoardIcon_16x16.png")));
        } catch (IOException ex) {
            Logger.getLogger(WhiteBoardFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        // update the control panel button attribute
        updateControlPanelButtonAttributes();

        /* ---------------------------------------------------------------------
         * THE SET IMAGE FUNCTION FOR THE WHITE BOARD IS NOT YET IMPLIMENTED
         * HENCE THE OPEN MENU ITEM IN THE FILE MENU IS DISSABLED FOR NOW
         * ---------------------------------------------------------------------
         */
        openMenuItem.setVisible(false);
        openMenuItem.setEnabled(false);     
    }

    /*
     * method to update the control panel button attributes
     */
    private void updateControlPanelButtonAttributes() {
        // set the chalk color selection button background color to the selected chalk color
        chalkColorButton.setBackground(whiteBoardPanel.getChalkColor());
        // set the chalk color selection button foreground color to the contrast of the selected chalk color
        chalkColorButton.setForeground(ContrastColor.getContrastColor(whiteBoardPanel.getChalkColor()));
        // set the board color selection button background color to the selected board color
        boardColorButton.setBackground(whiteBoardPanel.getBoardColor());
        // set the board color selection button foreground color to the contrast of the selected board color
        boardColorButton.setForeground(ContrastColor.getContrastColor(whiteBoardPanel.getBoardColor()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        framePanel = whiteBoardPanel;
        controlPanel = new javax.swing.JPanel();
        chalkColorButton = new javax.swing.JButton();
        boardColorButton = new javax.swing.JButton();
        chalkSizeSpinner = new javax.swing.JSpinner();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        clearBoardMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();
        helpMenuItem = new javax.swing.JMenuItem();

        setTitle("WhiteBoard v0.1");

        framePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                framePanel_MousePressedEvent(evt);
            }
        });
        framePanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                framePanel_ComponentREsizedEvent(evt);
            }
        });
        framePanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                framePanel_MouseDraggedEvent(evt);
            }
        });

        javax.swing.GroupLayout framePanelLayout = new javax.swing.GroupLayout(framePanel);
        framePanel.setLayout(framePanelLayout);
        framePanelLayout.setHorizontalGroup(
            framePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 356, Short.MAX_VALUE)
        );
        framePanelLayout.setVerticalGroup(
            framePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        controlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Controls"));

        chalkColorButton.setText("Chalk Color");
        chalkColorButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                controls_chalkColorButton_MousePressedEvent(evt);
            }
        });

        boardColorButton.setText("Board Color");
        boardColorButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                controls_boardColorButton__MousePressedEvent(evt);
            }
        });

        chalkSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(10, 2, 100, 1));
        chalkSizeSpinner.setBorder(javax.swing.BorderFactory.createTitledBorder("Chalk Size"));
        chalkSizeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                controls_chalkSizeSpinner_StateChangedEvent(evt);
            }
        });

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chalkColorButton)
            .addComponent(chalkSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(boardColorButton)
        );

        controlPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {boardColorButton, chalkColorButton, chalkSizeSpinner});

        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addComponent(chalkColorButton)
                .addGap(18, 18, 18)
                .addComponent(chalkSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(boardColorButton)
                .addContainerGap(85, Short.MAX_VALUE))
        );

        fileMenu.setText("File");

        newMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mavrk/jlm/whiteboard/gui/resources/new.png"))); // NOI18N
        newMenuItem.setText("New");
        newMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                newMenuItem_MousePressedEvent(evt);
            }
        });
        fileMenu.add(newMenuItem);

        openMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mavrk/jlm/whiteboard/gui/resources/open.png"))); // NOI18N
        openMenuItem.setText("Open");
        openMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                openMenuItem_MousePressedEvent(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mavrk/jlm/whiteboard/gui/resources/save.png"))); // NOI18N
        saveMenuItem.setText("Save");
        saveMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                saveMenuItem_MousePressedEvent(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mavrk/jlm/whiteboard/gui/resources/saveAs.png"))); // NOI18N
        saveAsMenuItem.setText("Save As");
        saveAsMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                saveAsMenuItem_MousePressedEvent(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mavrk/jlm/whiteboard/gui/resources/exit.png"))); // NOI18N
        exitMenuItem.setText("Exit");
        exitMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                exitMenuItem_MousePressedEvent(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        clearBoardMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mavrk/jlm/whiteboard/gui/resources/clear.png"))); // NOI18N
        clearBoardMenuItem.setText("Clear Board");
        clearBoardMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                clearBoardMenuItem_MousePressedEvent(evt);
            }
        });
        editMenu.add(clearBoardMenuItem);

        menuBar.add(editMenu);

        helpMenu.setText("Help");

        aboutMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mavrk/jlm/whiteboard/gui/resources/about.png"))); // NOI18N
        aboutMenuItem.setText("About");
        aboutMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                aboutMenuItem_MousePressedEvent(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        helpMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mavrk/jlm/whiteboard/gui/resources/help.png"))); // NOI18N
        helpMenuItem.setText("Help");
        helpMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                helpMenuItem_MousePressedEvent(evt);
            }
        });
        helpMenu.add(helpMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(framePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(framePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
     * method called when new menu item is selected 
     */
    private void newMenuItem_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newMenuItem_MousePressedEvent
        // TODO add your handling code here:
        // set file refernce to null
        file = null;
        // clear the board
        whiteBoardPanel.clearBoard();
        // if remote board controller is present then send clear command
        if (remoteBoardController != null) {
            remoteBoardController.clearBoard();
        }
    }//GEN-LAST:event_newMenuItem_MousePressedEvent

    /*
     * method called when open menu item is pressed
     */
    private void openMenuItem_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openMenuItem_MousePressedEvent
        // TODO add your handling code here:
        // create a file chooser object
        JFileChooser jfc = new JFileChooser();
        // get selection result
        int selection = jfc.showOpenDialog(jfc);
        // if selection is of type approve
        if (selection == JFileChooser.APPROVE_OPTION) {
            //get the selected file
            file = jfc.getSelectedFile();
            try {
                // set the current white board panel image from the selected file
                whiteBoardPanel.setBoardImage(ImageIO.read(file));
                // if remote board controller is present then send command to set the remote board image
                if (remoteBoardController != null) {
                    remoteBoardController.setBoardImage(ImageIO.read(file));
                }
            } catch (IOException ex) {
                Logger.getLogger(WhiteBoardFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_openMenuItem_MousePressedEvent

    /*
     * method called when save menu item is selected
     */
    private void saveMenuItem_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveMenuItem_MousePressedEvent
        // TODO add your handling code here:
        // if no previous files saved then
        if (file == null) {
            // create a file chooser
            JFileChooser jfc = new JFileChooser();
            // get selection type
            int selection = jfc.showSaveDialog(jfc);
            // on approve selection 
            if (selection == JFileChooser.APPROVE_OPTION) {
                // get the selected file
                file = jfc.getSelectedFile();
            }
        }
        // if a previous copy of the image is already saved to a file then
        if (file != null) {
            try {
                // write the image onto that file
                ImageIO.write(whiteBoardPanel.getBoardImage(), "PNG", file);
            } catch (IOException ex) {
                Logger.getLogger(WhiteBoardFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_saveMenuItem_MousePressedEvent

    /*
     * method called when save as menu item mouse pressed
     */
    private void saveAsMenuItem_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveAsMenuItem_MousePressedEvent
        // TODO add your handling code here:
        // create a file chooser
        JFileChooser jfc = new JFileChooser();
        // get selection result 
        int selection = jfc.showSaveDialog(jfc);
        // if type is approve type
        if (selection == JFileChooser.APPROVE_OPTION) {
            // get selected file
            file = jfc.getSelectedFile();
            try {
                // save the board image onto the file
                ImageIO.write(whiteBoardPanel.getBoardImage(), "PNG", file);
            } catch (IOException ex) {
                Logger.getLogger(WhiteBoardFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_saveAsMenuItem_MousePressedEvent

    /*
     * method called whenclear board menu item mouse pressed
     */
    private void clearBoardMenuItem_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearBoardMenuItem_MousePressedEvent
        // TODO add your handling code here:
        // clear the current white board panel
        whiteBoardPanel.clearBoard();
        // if remote board controller present then 
        if (remoteBoardController != null) {
            // send command to clear the remote white board panel
            remoteBoardController.clearBoard();
        }
    }//GEN-LAST:event_clearBoardMenuItem_MousePressedEvent

    /*
     * method called when about menu item moouse pressed
     */
    private void aboutMenuItem_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutMenuItem_MousePressedEvent
        // TODO add your handling code here:
        try {
            // create a property object
            Properties prop = new Properties();
            //load the white board properties file
            InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream("com/mavrk/jlm/whiteboard/properties/whiteboard.properties");
            prop.load(inputStream);
            // set the about info from the white board properties
            String aboutMessage = prop.getProperty("AppName") + "\n\n"
                    + "Developed By: " + prop.getProperty("DevelopedBy") + "\n"
                    + "Email: " + prop.getProperty("DeveloperEmail");
            // show the info about the white board
            JOptionPane.showMessageDialog(rootPane, aboutMessage, "About", JOptionPane.INFORMATION_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/com/mavrk/jlm/whiteboard/gui/resources/whiteBoardIcon_32x32.png")));

        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(rootPane, "Error! Cannot Load About Docs!\nFile Not Found Exception:\n" + ex, "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(WhiteBoardFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane, "Error! Cannot Load About Docs!\nIO Exception:\n" + ex, "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(WhiteBoardFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Error! Cannot Load About Docs!\nUnknown Exception:\n" + ex, "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(WhiteBoardFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_aboutMenuItem_MousePressedEvent

    /*
     * method called when help menu mouse pressed
     */
    private void helpMenuItem_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpMenuItem_MousePressedEvent
        // TODO add your handling code here:
        try {
            // create a property object
            Properties prop = new Properties();
            //load the white board properties file
            InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream("com/mavrk/jlm/whiteboard/properties/whiteboard.properties");
            prop.load(inputStream);
            // set the help info from the property
            String helpMessage = prop.getProperty("AppHelp");
            // show the help info
            JOptionPane.showMessageDialog(rootPane, helpMessage, "Help", JOptionPane.INFORMATION_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/com/mavrk/jlm/whiteboard/gui/resources/whiteBoardIcon_32x32.png")));

        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(rootPane, "Error! Cannot Load Help Docs!\nFile Not Found Exception:\n" + ex, "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(WhiteBoardFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane, "Error! Cannot Load Help Docs!\nIO Exception:\n" + ex, "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(WhiteBoardFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Error! Cannot Load Help Docs!\nUnknown Exception:\n" + ex, "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(WhiteBoardFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_helpMenuItem_MousePressedEvent

    /*
     * method called when the chalk colour selection button mouse pressed
     */
    private void controls_chalkColorButton_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_controls_chalkColorButton_MousePressedEvent
        // TODO add your handling code here:
        // set the chalk color from color chooser
        chalkColor = JColorChooser.showDialog(this, "Select Chalk Color", Color.BLACK);
        // set the white board chalk color
        whiteBoardPanel.setChalkColor(chalkColor);
        // if remote board controller present then send chalk color set command
        if (remoteBoardController != null) {
            remoteBoardController.setChalkColor(chalkColor);
        }
        updateControlPanelButtonAttributes();
    }//GEN-LAST:event_controls_chalkColorButton_MousePressedEvent

    /*
     * method called when board color selection button mouse pressed 
     */
    private void controls_boardColorButton__MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_controls_boardColorButton__MousePressedEvent
        // TODO add your handling code here:
        // set the board color from the color chooser
        boardColor = JColorChooser.showDialog(this, "Select Board Color", Color.WHITE);
        // set the current white board panel board color
        whiteBoardPanel.setBoardColor(boardColor);
        // if remote board controller present then send the command to set the board color
        if (remoteBoardController != null) {
            remoteBoardController.setBoardColor(boardColor);
        }
        // update the control panel button attributes
        updateControlPanelButtonAttributes();
    }//GEN-LAST:event_controls_boardColorButton__MousePressedEvent

    /*
     * method called when chalk size spinner state changed
     */
    private void controls_chalkSizeSpinner_StateChangedEvent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_controls_chalkSizeSpinner_StateChangedEvent
        // TODO add your handling code here:
        // set the chalk size from the spinner value
        chalkSize = Integer.parseInt(chalkSizeSpinner.getValue().toString());
        // set the current white board panel chalk size
        whiteBoardPanel.setChalkSize(chalkSize);
        // if remote board controller present then send remote board chalk size change command
        if (remoteBoardController != null) {
            remoteBoardController.setChalkSize(chalkSize);
        }
    }//GEN-LAST:event_controls_chalkSizeSpinner_StateChangedEvent

    /*
     * method called when exit menu mouse pressed
     */
    private void exitMenuItem_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMenuItem_MousePressedEvent
        // TODO add your handling code here:
        // just dissappear than exitting
        this.setVisible(false);
    }//GEN-LAST:event_exitMenuItem_MousePressedEvent

    /*
     * method called when frame panel mouse pressed 
     */
    private void framePanel_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_framePanel_MousePressedEvent
        // TODO add your handling code here:
        // draw onto the white board panel at the mouse location
        whiteBoardPanel.drawOntoBoard(evt.getX(), evt.getY());
        // if remote board controller present then send the draw command at the mouse coordinates
        if (remoteBoardController != null) {
            remoteBoardController.drawOntoBoard(evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_framePanel_MousePressedEvent

    /*
     * method called when frame panel mouse dragged
     */
    private void framePanel_MouseDraggedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_framePanel_MouseDraggedEvent
        // TODO add your handling code here:
        // draw onto the white board panel at the mouse location
        whiteBoardPanel.drawOntoBoard(evt.getX(), evt.getY());
        // if remote board controller present then send the draw command at the mouse coordinates
        if (remoteBoardController != null) {
            remoteBoardController.drawOntoBoard(evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_framePanel_MouseDraggedEvent

    /*
     * method called when frame panel component resized
     */
    private void framePanel_ComponentREsizedEvent(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_framePanel_ComponentREsizedEvent
        // TODO add your handling code here:
        // resize the current white board panel
        whiteBoardPanel.resizeBoard(this.getWidth(), this.getHeight());
        // if remote board controller is present then send command to resize the remote board
        if (remoteBoardController != null) {
            remoteBoardController.resizeBoard(this.getWidth(), this.getHeight());
        }
    }//GEN-LAST:event_framePanel_ComponentREsizedEvent

    /*
     * setter for the control message
     */
    public void setControlMessage(Message controlMessage) {
        // set the control message
        this.controlMessage = controlMessage;
        // create remote board controller and current board controller object 
        // by providing the control message as the constructor parameter
        remoteBoardController = new RemoteBoardController(this.controlMessage);
        currentBoardController = new CurrentBoardController(whiteBoardPanel, this.controlMessage);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WhiteBoardFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WhiteBoardFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WhiteBoardFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WhiteBoardFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WhiteBoardFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton boardColorButton;
    private javax.swing.JButton chalkColorButton;
    private javax.swing.JSpinner chalkSizeSpinner;
    private javax.swing.JMenuItem clearBoardMenuItem;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel framePanel;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables
}
