/*
 This file is part of JLM v0.2

 JLM is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 JLM is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with JLM.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.mavrk.jlm.whiteboard.core.boardpanel;

import com.mavrk.jlm.whiteboard.core.WhiteBoardInterface;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

/**
 *
 * @author mavrk
 */

/*
 * this class is theimplimentation of the white board interface using a jpanel
 */
public class WhiteBoardPanel extends javax.swing.JPanel implements WhiteBoardInterface {

    // the board image object onto which all drawings are made
    private BufferedImage boardImage = null;
    // temporary board image for board color change operations
    private BufferedImage tempImage = null;
    // graphics object for the board image
    private Graphics boardImageGraphics = null;
    // chalk color
    private Color chalkColor = null;
    // board color
    private Color boardColor = null;
    // chalk size
    private int chalkSize = 0;

    /**
     * Creates new form WhiteBoardPanel
     */
    public WhiteBoardPanel() {
        initComponents();
        // set the custom cursor for the white board panel
        setCursorIcon();
        // set default chalk color, board color and chalk size
        chalkColor = Color.BLACK;
        boardColor = Color.WHITE;
        chalkSize = 10;
    }

    /*
     * the overridden paint method of the jpanel
     */
    @Override
    public void paint(Graphics g) {
        // set the board color
        g.setColor(boardColor);
        // clear the whole panel by filling it with the borad color
        g.fillRect(0, 0, this.getWidth(), this.getHeight());
        // draw the user drawn image onto the panel
        g.drawImage(boardImage, 0, 0, this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /*
     * white board interface method implimentation 
     * for drawing onto the panel (board)
     */
    @Override
    public void drawOntoBoard(int x, int y) {
        // pencil shape is circular so use fill oval
        // drawing at location (x,y) with the chalk size
        boardImageGraphics.fillOval(x - (chalkSize / 2), y - (chalkSize / 2), chalkSize, chalkSize);
        // repaint the panel
        this.repaint();
    }

    /*
     * white board interface method implimentation 
     * for resizing the board
     */
    @Override
    public void resizeBoard(int width, int height) {
        // resize only if board image is present 
        // and the new resolution is greater than the previous one
        // this is done so as to prevent image clipping on panel resize by the user
        // as if clipping is done then what ever the other person draws the current user wouldn't see
        if ((boardImage == null) || ((width >= boardImage.getWidth()) && (height >= boardImage.getHeight()))) {
            // save the curent board image to the temporary image
            tempImage = boardImage;
            // create a new image with new resolution and assign it to the board image
            boardImage = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR_PRE);
            // get the graphics object for the new image
            boardImageGraphics = boardImage.getGraphics();
            // set the chalk color for the new graphics object
            boardImageGraphics.setColor(chalkColor);
            // if there is a valid temp image then
            if (tempImage != null) {
                // draw that image onto the new board image
                boardImageGraphics.drawImage(tempImage, 0, 0, this);
            }
            // repaint the panel
            this.repaint();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    /*
     * method to set the custom cursor icon for the board panel
     */
    private void setCursorIcon() {
        try {
            //Get the default toolkit
            Toolkit toolkit = Toolkit.getDefaultToolkit();
            //Load an image for the cursor
            Image image = ImageIO.read(getClass().getResource("/com/mavrk/jlm/whiteboard/core/resources/chalk.png"));
            //Create the hotspot for the cursor
            Point hotSpot = new Point(0, 0);
            //Create the custom cursor        
            Cursor cursor = toolkit.createCustomCursor(image, hotSpot, "Chalk");
            //Use the custom cursor
            setCursor(cursor);
        } catch (IOException ex) {
            Logger.getLogger(WhiteBoardPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /*
     * white board interface method implimentation 
     * for clearing the contents of the board
     */
    @Override
    public void clearBoard() {
        // assign new image with the same resolution to the board image object
        boardImage = new BufferedImage(boardImage.getWidth(), boardImage.getHeight(), BufferedImage.TYPE_INT_ARGB_PRE);
        // get the graphics object for the new image
        boardImageGraphics = boardImage.getGraphics();
        // set the current chalk color for the graphics object
        boardImageGraphics.setColor(chalkColor);
        // repaint the panel
        this.repaint();
    }

    /*
     * GETTER AND SETTER for local variables
     */
    public BufferedImage getBoardImage() {
        // here the refernce to the original image is not returned
        // insted a new copy of the board image is made and returned
        BufferedImage newBoardImage = new BufferedImage(boardImage.getWidth(), boardImage.getHeight(), BufferedImage.TYPE_INT_ARGB_PRE);
        Graphics newBoardImageGraphics = newBoardImage.getGraphics();
        newBoardImageGraphics.setColor(boardColor);
        newBoardImageGraphics.fillRect(0, 0, newBoardImage.getWidth(), newBoardImage.getHeight());
        newBoardImageGraphics.drawImage(boardImage, 0, 0, this);
        return newBoardImage;
    }

    @Override
    public void setBoardImage(BufferedImage boardImage) {
        this.boardImageGraphics.drawImage(boardImage, 0, 0, this);
        this.repaint();
    }

    public Graphics getBoardImageGraphics() {
        return boardImageGraphics;
    }

    public void setBoardImageGraphics(Graphics boardImageGraphics) {
        this.boardImageGraphics = boardImageGraphics;
    }

    public Color getChalkColor() {
        return chalkColor;
    }

    @Override
    public void setChalkColor(Color chalkColor) {
        this.chalkColor = chalkColor;
        this.boardImageGraphics.setColor(this.chalkColor);
    }

    public int getChalkSize() {
        return chalkSize;
    }

    @Override
    public void setChalkSize(int chalkSize) {
        this.chalkSize = chalkSize;
    }

    public Color getBoardColor() {
        return boardColor;
    }

    @Override
    public void setBoardColor(Color boardColor) {
        this.boardColor = boardColor;
        this.repaint();
    }
}
